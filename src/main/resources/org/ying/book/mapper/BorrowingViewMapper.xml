<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.ying.book.mapper.BorrowingViewMapper">
  <resultMap id="BaseResultMapSimple" type="org.ying.book.pojo.BorrowingView">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="book_id" jdbcType="INTEGER" property="bookId" />
    <result column="borrowed_at" jdbcType="TIMESTAMP" property="borrowedAt" />
    <result column="returned_at" jdbcType="TIMESTAMP" property="returnedAt" />
    <result column="expected_return_at" jdbcType="TIMESTAMP" property="expectedReturnAt" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="is_deleted" jdbcType="BIT" property="deleted" />
    <result column="status" jdbcType="VARCHAR" property="status" />
  </resultMap>
  <resultMap id="BaseResultMap" type="org.ying.book.pojo.BorrowingView">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="book_id" jdbcType="INTEGER" property="bookId" />
    <result column="borrowed_at" jdbcType="TIMESTAMP" property="borrowedAt" />
    <result column="returned_at" jdbcType="TIMESTAMP" property="returnedAt" />
    <result column="expected_return_at" jdbcType="TIMESTAMP" property="expectedReturnAt" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="is_deleted" jdbcType="BIT" property="deleted" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <association property="book" column="book_id" javaType="org.ying.book.pojo.Book" select="selectBookByBookId"/>
    <association property="user" column="user_id" javaType="org.ying.book.pojo.User" select="selectUserByUserId"/>
  </resultMap>
  <select id="selectBookByBookId" parameterType="java.lang.Integer" resultMap="org.ying.book.mapper.BookMapper.BaseResultMap">
    select * from public.books where id = #{bookId}
  </select>
  <select id="selectUserByUserId" parameterType="java.lang.Integer" resultMap="org.ying.book.mapper.UserMapper.BaseResultMap">
    select * from public.users where id = #{userId}
  </select>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, book_id, borrowed_at, returned_at, expected_return_at, created_at, updated_at, 
    is_deleted, status
  </sql>
  <select id="selectByExample" parameterType="org.ying.book.pojo.BorrowingViewExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from public.borrowings_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="org.ying.book.pojo.BorrowingViewExample">
    delete from public.borrowings_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="org.ying.book.pojo.BorrowingView" useGeneratedKeys="true">
    insert into public.borrowings_view (user_id, book_id, borrowed_at, 
      returned_at, expected_return_at, created_at, 
      updated_at, is_deleted, status
      )
    values (#{userId,jdbcType=INTEGER}, #{bookId,jdbcType=INTEGER}, #{borrowedAt,jdbcType=TIMESTAMP}, 
      #{returnedAt,jdbcType=TIMESTAMP}, #{expectedReturnAt,jdbcType=TIMESTAMP}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{updatedAt,jdbcType=TIMESTAMP}, #{deleted,jdbcType=BIT}, #{status,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="org.ying.book.pojo.BorrowingView" useGeneratedKeys="true">
    insert into public.borrowings_view
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="bookId != null">
        book_id,
      </if>
      <if test="borrowedAt != null">
        borrowed_at,
      </if>
      <if test="returnedAt != null">
        returned_at,
      </if>
      <if test="expectedReturnAt != null">
        expected_return_at,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="deleted != null">
        is_deleted,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="bookId != null">
        #{bookId,jdbcType=INTEGER},
      </if>
      <if test="borrowedAt != null">
        #{borrowedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="returnedAt != null">
        #{returnedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="expectedReturnAt != null">
        #{expectedReturnAt,jdbcType=TIMESTAMP},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=BIT},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.ying.book.pojo.BorrowingViewExample" resultType="java.lang.Long">
    select count(*) from public.borrowings_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update public.borrowings_view
    <set>
      <if test="row.id != null">
        id = #{row.id,jdbcType=INTEGER},
      </if>
      <if test="row.userId != null">
        user_id = #{row.userId,jdbcType=INTEGER},
      </if>
      <if test="row.bookId != null">
        book_id = #{row.bookId,jdbcType=INTEGER},
      </if>
      <if test="row.borrowedAt != null">
        borrowed_at = #{row.borrowedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="row.returnedAt != null">
        returned_at = #{row.returnedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="row.expectedReturnAt != null">
        expected_return_at = #{row.expectedReturnAt,jdbcType=TIMESTAMP},
      </if>
      <if test="row.createdAt != null">
        created_at = #{row.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="row.updatedAt != null">
        updated_at = #{row.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="row.deleted != null">
        is_deleted = #{row.deleted,jdbcType=BIT},
      </if>
      <if test="row.status != null">
        status = #{row.status,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update public.borrowings_view
    set id = #{row.id,jdbcType=INTEGER},
      user_id = #{row.userId,jdbcType=INTEGER},
      book_id = #{row.bookId,jdbcType=INTEGER},
      borrowed_at = #{row.borrowedAt,jdbcType=TIMESTAMP},
      returned_at = #{row.returnedAt,jdbcType=TIMESTAMP},
      expected_return_at = #{row.expectedReturnAt,jdbcType=TIMESTAMP},
      created_at = #{row.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{row.updatedAt,jdbcType=TIMESTAMP},
      is_deleted = #{row.deleted,jdbcType=BIT},
      status = #{row.status,jdbcType=VARCHAR}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <select id="selectByExampleWithRowbounds" parameterType="org.ying.book.pojo.BorrowingViewExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from public.borrowings_view
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
</mapper>